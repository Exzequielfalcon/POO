import java.io.BufferedReader;
import java.io.InputStreamReader;


public class SimularBanco {
	final public static int MAXC=10;
	
	
	
	
																				//CUENTAS
	
	public int CrearCuenta (Cliente clientes[], Cuenta cuentas[], int n){
		boolean encontrado=true;
		String mon;
		Movimiento mov[]= new Movimiento [10];
		int i, aux=0;
		try{
			BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Desea crear una nueva cuenta? Ingrese Si o No");
		mon = new String(entrada.readLine());
		while(!((mon.equals("No")) || (mon.equals("no"))||(mon.equals("si")) || mon.equals("Si"))){
			System.out.println("Desea crear una nueva cuenta? Ingrese Si o No");
			mon = new String(entrada.readLine());
		}
		if ((mon.equals("si")) || mon.equals("Si")){
			for (i=0; i<MAXC;i++){
				if ((cuentas[i]==null)&&(encontrado==true)){
					cuentas[i]= new Cuenta(0,clientes[i], mov);
					encontrado=false;
					aux=i;
				}
			}
		}
		else if ((mon.equals("No")) || (mon.equals("no"))){
			
		}
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
		return aux;
}
	
	public void MostrarCuenta (double monto, int dni, Cliente clientes[], int i){
		clientes[i].mostrarcliente(clientes[i].getNombre(), clientes[i].getApellido(), clientes[i].getDni(), clientes[i].isMonotributista());
		System.out.println("El monto es de: " +monto);
	}
	
	
	public int BuscarCuentas(Cuenta cuentas[], Cliente clientes[]){
		int acc=0,a=0, b=0;
		int arr[] =  new int [MAXC];
		
		a=EncontrarDni(clientes);  //posicion del cliente
		try{
			BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
			System.out.println(a);
			for (int i=0;i<MAXC;i++){
				if (cuentas[i]!=null){
					System.out.println("entro");
					System.out.println("dni "+cuentas[i].getCliente().getDni());
				if (cuentas[i].getCliente().getDni()==clientes[a].getDni()){ 
					System.out.println("Usted tiene una cuenta en la posicion " + i);
					arr[b]= i;			//posicion de cuenta
					b++;
				}
				}
			}
		
			System.out.println("QUe cuenta desea seleccionar?");
			acc = new Integer(entrada.readLine());
			
			for (int d=0;d<b;d++){
				while(cuentas[d].getCliente().getDni()!=acc){
					System.out.println("Esa cuenta no es suya, que cuenta desea seleccionar?");
					acc = new Integer(entrada.readLine());
				}
			}
			
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
		return acc;
	}
	
	
																							//Clientes
	
	
	public int EncontrarDni (Cliente clientes[]){  //Encontrar cliente por DNI
		int a=Cliente.cargadni();
		boolean encontrado= false;
		int ret=-1;
		int i=0;
		while ((i<MAXC) && (encontrado==false)){
			if (clientes[i]!=null){
			if (clientes[i].getDni()==a){
				System.out.println("Dni encontrado en la posicion "+i);
				ret=i;
				encontrado=true;
			}
			}
			i++;
		}
		if (encontrado==false){
			String mon;
			System.out.println("El cliente no existe, desea darse de alta en nuestro banco? Ingrese Si o no");
			try{
				BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
			mon = new String(entrada.readLine());
			if ((mon.equals("si")) || mon.equals("Si")){
				ret =CrearCliente(clientes);
				
			}
			else if ((mon.equals("No")) || (mon.equals("no"))){
				
			}
			while(!((mon.equals("No")) || (mon.equals("no"))||(mon.equals("si")) || mon.equals("Si"))){
				System.out.println("Si es monotributista ingrese Si o No");
				mon = new String(entrada.readLine());
			}
			}
			catch (Exception exc ) {
				System.out.println( exc );			
				}
		}
		return ret; //Si ret queda en -1 Es porque no hay cliente ni quiere crearlo
	}
	
	public int CrearCliente (Cliente clientes[]){
		int aux=0;
		boolean encontrado=true;
		for (int i=0; i<MAXC;i++){
			if ((clientes[i]==null)&&(encontrado==true)){
			clientes[i]=new Cliente(Cliente.carganombre(),Cliente.cargaapellido(),Cliente.cargadni(),Cliente.cargamon());
			encontrado=false;
			aux=i;
		}
			//clientes[i].mostrarcliente(clientes[i].nombre, clientes[i].apellido, clientes[i].dni, clientes[i].monotributista);

		}
		return aux;
	}
	public void MostrarCliente(int dni, Cliente clientes[]){
		int a = EncontrarDni(clientes);
		System.out.println("Nombre: "+ clientes[a].getNombre());
		System.out.println("Apellido: "+ clientes[a].getApellido());
		System.out.println("Dni: "+ clientes[a].getDni());
		if (clientes[a].isMonotributista()==true)
			System.out.println("Monotributista: Si ");
			else{
				System.out.println("Monotributista: No");
			}
	}
	
	
	
								
									//Movimientos
	
	
	

	public double deposito (Cuenta cuentas[],int ncuenta, Cliente clientes[], int ncliente){
		String type="Deposito";
		int tipo=1;
		double dep=0;
		try{
			BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Ingrese el monto que quiere depositar");
		dep = new Double(entrada.readLine());
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
		dep=IIBB(dep, clientes, ncliente, cuentas, ncuenta);
		dep=cuentas[ncuenta].getMonto()+dep;
		
		return dep;
	}
	public double depositosincuenta (Cliente clientes[], Cuenta cuentas[]){
		String type="Deposito";
		int tipo=1;
		double dep=0;
		int nd;
		try{
		BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
		int encliente=EncontrarDni(clientes);
		if (encliente!=-1){
		System.out.println("A que numero de cuenta desea depositar?");
		nd = new Integer(entrada.readLine());
		if (cuentas[nd]!=null){
		System.out.println("Ingrese el monto que quiere depositar");		//Por aca tendria que poner los movimientos de la cuenta
		dep = new Double(entrada.readLine());
		dep=cuentas[nd].getMonto()+dep;
				}
		else System.out.println("La cuenta no existe");
			}
		else System.out.println("El cliente no existe");
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
		return dep; //Combinar con setMonto entonces el return que devuelve es igual al setmonto
	}
	public void TransferenciaDinero(Cuenta cuentas[], Cliente clientes[]){
		String type="Transferencia de dinero";
		int nd=0;
		double a=0;
		try{
			int ncliente=EncontrarDni(clientes);
			int ncuenta=BuscarCuentas(cuentas, clientes);
			BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
		System.out.println("A que numero de cuenta desea depositar?");
		nd = new Integer(entrada.readLine());
		System.out.println("Cuanto desea depositar?");
		System.out.println("Su saldo actual es "+ cuentas[ncuenta].getMonto());
		a = new Integer(entrada.readLine());
		while (a>cuentas[ncuenta].getMonto()){
			System.out.println("Su saldo es insuficiente");
			a = new Integer(entrada.readLine());
		}
		
		double d= cuentas[ncuenta].getMonto();
		
		cuentas[nd].setMonto(IIBB(a, clientes, ncliente, cuentas, ncuenta));
		cuentas[ncuenta].setMonto(d-a);
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
	}
	
	public double IIBB(double a, Cliente clientes[], int ncliente, Cuenta cuentas[], int ncuenta){ //IIBB
		int tipo=3;
		String operacion="IIBB";
		if ((clientes[ncliente]).isMonotributista()==true){
			a=a-a*0.02;
			System.out.println(a);
			//Movi(cuentas)
			return a;
			
		}
		else{
			return a;
		}
		
	}
	public  void retiro(Cliente clientes[], Cuenta cuentas[]){
		int tipo=5;
		String operacion="Retiro de dinero";
		
		double dinero=0;
		try{
			BufferedReader entrada= new BufferedReader(new InputStreamReader(System.in));
			int encliente= EncontrarDni(clientes);
			if (encliente!=-1){
				int acc=BuscarCuentas(cuentas, clientes);
				System.out.println("Cuanto dinero desea retirar?");
				System.out.println("Su saldo actual es "+ cuentas[acc].getMonto());
				dinero = new Double(entrada.readLine());
				while (dinero>cuentas[acc].getMonto()){
					System.out.println("Su saldo es insuficiente, ingrese otro monto");
					dinero = new Integer(entrada.readLine());
				}
				cuentas[acc].setMonto(cuentas[acc].getMonto()-dinero);
				System.out.println("Su saldo actual es "+ cuentas[acc].getMonto());
				Movimiento nuevo= new Movimiento(dinero, tipo, operacion);
				Cuenta.AgregarMov(nuevo, cuentas, acc);
			}
			
		}
		catch (Exception exc ) {
			System.out.println( exc );			
			}
		
	}
}
